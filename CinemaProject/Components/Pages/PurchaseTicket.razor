@page "/PurchaseTicket"

@using System.Text.Json
@using CinemaProject.Data
@using CinemaProject.Data.Models
@using CinemaProject.Data.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApplicationDbContext databaseContext

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager

@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]

<div class="container">
    @if (movie != null) {
        
        <div class="row justify-content-center">
            <div class="col-auto col-md-5 col-lg-5 col-xl-5">
                <div class="card mb-3">
                    <img class="card-img-top" height="320px" src="./assets/@(movie.PosterImage.URLPath)" alt="Card image cap">
                    <div class="card-body">
                        <h1 class="card-title fs-3">@(movie.Title) | 
                            <span class="card-text fs-5">@( DateOnly.FromDateTime(DateTime.FromBinary( movie.Sessions[0].SessionDate).ToUniversalTime()) ) at @(movie.Sessions[0].SessionTime)</span>
                        </h1>
                        <p class="card-text">You are about to purchase a ticket for @(movie.Title).</p>
                        <p class="card-text">Your account details will be saved in our systems and a code will be sent via Email after payment is complete.</p>
                    </div>
                    <div class="card-footer">
                        <div class="float-end">
                            <a href="./" class="btn btn-lg btn-outline-danger"> Cancel </a>
                            <button class="btn btn-primary btn-lg ms-2" @onclick="HandlePurchase" > Continue to Payment </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>



<script>
    function showAlert(message) {
        alert(message);
    }
</script>


@code {
    [SupplyParameterFromQuery]
    string? SessionID {get; set;}
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private string UserEmail {get; set;} = string.Empty;
    Movie? movie {get; set;}
    protected override async Task OnInitializedAsync() {
        if (string.IsNullOrEmpty(SessionID)) { RedirectHome(); return;}

        if (authenticationState == null) { return;}
        var authState = await authenticationState;
        
        if (authState.User.Identity?.Name == null) { return;}
        UserEmail = authState.User.Identity.Name;

        var movieEntry = await databaseContext.Movies.Where(m => m.Sessions.Any(s => s.Id == Int64.Parse(SessionID) ))
        .Include(m => m.PosterImage)
        .Include(m => m.Sessions.Where(s => s.Id == Int64.Parse(SessionID) ))
        .FirstOrDefaultAsync();
        if (movieEntry == null) { RedirectHome(); return;}
        movie = movieEntry;

        
    }

    private void RedirectHome() {
        NavigationManager.NavigateTo("/",true);
    }
    private async Task HandlePurchase() {
        if (movie == null) { return; }
        await JSRuntime.InvokeVoidAsync("showAlert", "Normally the user would be redirected to a purchase API like Stripe and receive an Email confirmation.");


        var databaseUser = await databaseContext.Users.Where(u => u.Email == UserEmail ).FirstAsync();
        if (databaseUser == null) { return; }
        // checks if the user is has already purchase this ticket.
        
        bool hasPuchasedTicket = await databaseContext.Sessions
                                    .Where(s => s.Id == movie.Sessions[0].Id)
                                    .SelectMany(s => s.Tickets)
                                    .AnyAsync(t => t.User.Email == UserEmail);
        
        if ( hasPuchasedTicket ) {  
            await JSRuntime.InvokeVoidAsync("showAlert", "This account already purchased this ticket. No actions taken. (Resending confirmation ticket if email was setted.)");
        } else {
            // register this user ticket.
            movie.Sessions[0].Tickets.Add(new Ticket() { User = databaseUser});
            await databaseContext.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("showAlert", "The ticket is now validated.");
        }
        NavigationManager.NavigateTo("/",true);
    }

    

}
