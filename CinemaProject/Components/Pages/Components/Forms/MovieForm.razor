@using CinemaProject.Data.Models;
@using CinemaProject.Data.Services;
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject IMovieService MovieService
@inject IAttachmentService AttachmentService
@inject ILogger<MovieForm> Logger


<EditForm OnValidSubmit="AddNewMovie" Model="newMovie" FormName="movieInput">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col">
            <div class="form-floating mb-1">
                <InputText @bind-Value="newMovie.Tittle" id="Movietitle" class="form-control" aria-required="true"
                    placeholder="" />
                <label for="Movietitle">Movie Title</label>
                <ValidationMessage For="() => newMovie.Tittle" class="text-danger" />
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="form-floating mb-1">

                <InputDate @bind-Value="newMovie.ReleaseDate" id="MovieRelease" class="form-control"
                    aria-required="true" />
                <label for="MovieRelease">Movie Release Date</label>
                <ValidationMessage For="() => newMovie.ReleaseDate" class="text-danger" />

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="form-floating mb-2">

                <InputText @bind-Value="newMovie.Categories" id="MovieCategories" class="form-control"
                    aria-required="true" placeholder="" />
                <label for="MovieCategories">Movie Categories</label>
                <ValidationMessage For="() => newMovie.Categories" class="text-danger" />

            </div>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="form mb-3">

                <label for="MovieDescription">Movie description</label>
                <InputTextArea @bind-Value="newMovie.Description" aria-required="true" id="MovieDescription"
                    class="form-control" rows="3" placeholder="" />
                <ValidationMessage For="() => newMovie.Description" class="text-danger" />

            </div>
        </div>
    </div>

    <div class="card p-2 mb-3">
        <div class="row">
            <div class="col mb-3">
                <label for="moviePoster">Movie poster media</label>
                <InputFile class="form-control" id="moviePoster" OnChange="HandlePosterFile" accept="video/*,image/*" />
            </div>
        </div>
        <div class="row">
            <div class="col">
                <label for="movieExtras">Movie Extras</label>
                <InputFile class="form-control" id="movieExtras" multiple OnChange="HandleExtraFiles"
                    accept="video/*,image/*" />
            </div>
        </div>


    </div>

    <div class="row justify-content-end shadow shadow-lg">
        <input type="submit" class="btn btn-lg col-6 col-lg-3 btn-outline-primary" value="Add new movie" />
    </div>

</EditForm>


@code {
    [SupplyParameterFromForm]
    private MovieInputModel newMovie { get; set; }

    // file config
    public long maxFileSize { get; } = 1024 * 1024 * 30; // represents 30 MB
    public int maxFileAmmount { get; } = 10; // int maxAmmountFiles = 10;

    protected override void OnInitialized()
    {
        newMovie ??= new();
    }


    private void HandleExtraFiles(InputFileChangeEventArgs e)
    {
        newMovie.ExtraContent = new();
        foreach (var file in e.GetMultipleFiles(maxFileAmmount))
        {
            if (file.ContentType.Contains("image") || file.ContentType.Contains("video"))
            {
                newMovie.ExtraContent.Append(file);
            }
        }
    }

    private void HandlePosterFile(InputFileChangeEventArgs e)
    {

        if (e.File.ContentType.Contains("image")
        || e.File.ContentType.Contains("video")
        || e.File.Size < maxFileAmmount)
        {
            newMovie.PosterImage = e.File;
        }
    }


    private async Task AddNewMovie(EditContext editContext)
    {

        Console.WriteLine(JsonSerializer.Serialize(editContext,
        new JsonSerializerOptions
            {
                WriteIndented = true
            }));

        return;
    }
    public async Task SubmitHandler(EditContext editContext)
    {

        /*
        Movie ResultMovie = new()
        {
        Title = newMovie.Title,
        Description = newMovie.Description,
        Categories = newMovie.Categories,
        ReleaseDate = newMovie.ReleaseDate.Ticks,
        PosterImage = await AttachmentService.UploadFile(newMovie.PosterImage)
        };
        var newMovie = await MovieService.CreateMovie(ResultMovie);
        */
        //NavigationManager.NavigateTo("/", true);
    }

    private sealed class MovieInputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Movie Tittle")]
        public string Tittle { get; set; } = String.Empty;

        [Required]
        [DataType(DataType.Text)]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Movie Description")]
        public string Description { get; set; } = String.Empty;

        [Required]
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy}")]
        [Display(Name = "Movie release date")]
        public DateOnly? ReleaseDate { get; set; }

        [Required]
        [DataType(DataType.Text)]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Movie Categories")]
        public string Categories { get; set; } = String.Empty;

        [DataType(DataType.Upload)]
        [Display(Name = "Movie poster image")]
        public IBrowserFile? PosterImage { get; set; }

        [DataType(DataType.Upload)]
        [Display(Name = "Movie extra content")]
        public List<IBrowserFile> ExtraContent { get; set; } = new(); // []


    }
}



