@rendermode InteractiveServer
@attribute [StreamRendering]

@using CinemaProject.Data.Models;
@using CinemaProject.Data.Services;
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;

@inject NavigationManager NavigationManager
@inject IMovieService MovieService
@inject IAttachmentService AttachmentService
@inject ILogger<MovieInputForm> Logger

<div class="container-fluid">
<EditForm OnValidSubmit="AddNewMovie" Model="newMovie" FormName="movieInput">
    <DataAnnotationsValidator />
    <AntiforgeryToken/>
        <div class="row">
            <div class="col">
                <div class="form-floating mb-1">
                    <InputText @bind-Value="newMovie.Tittle" id="Movietitle" class="form-control" aria-required="true"
                        placeholder="" />
                    <label for="Movietitle">Movie Title</label>
                    <ValidationMessage For="() => newMovie.Tittle" class="text-danger" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form-floating mb-1">

                    <InputDate @bind-Value="newMovie.ReleaseDate" id="MovieReleaseDate" class="form-control"
                        aria-required="true" />
                    <label for="MovieReleaseDate">Movie Release Date</label>
                    <ValidationMessage For="() => newMovie.ReleaseDate" class="text-danger" />

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form-floating mb-2">

                    <InputText @bind-Value="newMovie.Categories" id="MovieCategories" class="form-control"
                        aria-required="true" placeholder="" />
                    <label for="MovieCategories">Movie Categories</label>
                    <ValidationMessage For="() => newMovie.Categories" class="text-danger" />

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form mb-3">

                    <label for="MovieDescription">Movie description</label>
                    <InputTextArea @bind-Value="newMovie.Description" aria-required="true" id="MovieDescription"
                        class="form-control" rows="3" placeholder="" />
                    <ValidationMessage For="() => newMovie.Description" class="text-danger" />

                </div>
            </div>
        </div>

        <div class="card p-2 mb-3">
            <div class="row">
                <div class="col mb-3">
                    <label for="moviePoster">Movie poster media</label>
                    <InputFile class="form-control" id="moviePoster" required OnChange="HandlePosterFile"
                        accept="video/*,image/*" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <label for="movieExtras">Movie Extras</label>
                    <InputFile class="form-control" id="movieExtras" multiple OnChange="HandleExtraFiles"
                        accept="video/*,image/*" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col ">
                <button type="submit" class="btn btn-lg  float-end btn-outline-primary"> Add new movie </button>
            </div>
        </div>
</EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    private MovieInputModel newMovie { get; set; } = new();

    // file config
    public long maxFileSize { get; } = 1024 * 1024 * 30; // represents 30 MB
    public int maxFileAmmount { get; } = 10; // int maxAmmountFiles = 10;

    protected override void OnInitialized()
    {
        newMovie ??= new();
    }

    private void HandleExtraFiles(InputFileChangeEventArgs e)
    {
        List<IBrowserFile> resultList = [];
        foreach (IBrowserFile file in e.GetMultipleFiles(maxFileAmmount))
        {
            if (file.ContentType.Contains("image")
            || file.ContentType.Contains("video")
            || file.Size < maxFileSize)
            {
                resultList.Add(file);
            }
        }
        newMovie.ExtraContent = resultList;
    }
    private void HandlePosterFile(InputFileChangeEventArgs e)
    {
        if (e.File.ContentType.Contains("image")
        || e.File.ContentType.Contains("video")
        || e.File.Size < maxFileSize)
        {
            newMovie.PosterImage = e.File;
        }
    }

    private async Task<List<Attachment>> UploadMultipleFiles(List<IBrowserFile> files)
    {
        List<Attachment> result = new();

        foreach (IBrowserFile file in files)
        {
            var attachment = await AttachmentService.UploadFile(file);
            result.Add(attachment);
        }
        return result;
    }
    private async Task AddNewMovie(EditContext editContext)
    {

        Movie resultMovie = new()
            {
                Title = newMovie.Tittle,
                Description = newMovie.Description,
                Categories = newMovie.Categories,
                ReleaseDate = newMovie.ReleaseDate?.Ticks ?? 0,
                PosterImage = await AttachmentService.UploadFile(newMovie.PosterImage),
                MovieExtras = await UploadMultipleFiles(newMovie.ExtraContent)
            };

        var createdMovie = await MovieService.CreateMovie(resultMovie);

        Logger.LogInformation("Added new Movie to the database:" + createdMovie.Id.ToString());
        NavigationManager.NavigateTo("/", true);
        return;
    }

    private sealed class MovieInputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Movie Tittle")]
        public string Tittle { get; set; } = String.Empty;

        [Required]
        [DataType(DataType.Text)]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Movie Description")]
        public string Description { get; set; } = String.Empty;

        [DataType(DataType.Date)]
        [Display(Name = "Movie release date")]
        public DateTime? ReleaseDate { get; set; }

        [Required]
        [DataType(DataType.Text)]
        [StringLength(255, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [Display(Name = "Movie Categories")]
        public string Categories { get; set; } = String.Empty;

#pragma warning disable CS8618
        // since the file will be a requirement.
        [DataType(DataType.Upload)]
        [Display(Name = "Movie poster image")]
        public IBrowserFile PosterImage { get; set; }
#pragma warning restore CS8618

        [DataType(DataType.Upload)]
        [Display(Name = "Movie extra content")]
        public List<IBrowserFile> ExtraContent { get; set; } = new(); // []


    }
}
